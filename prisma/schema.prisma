// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


// Define your data model using Prisma Schema language

// User model representing users of the system
// Define your data model using Prisma Schema language
model User {
  id             String     @id @default(uuid())
  email          String     @unique
  password       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  articles       Article[]
  projects       Project[]
  profile        Profile?
  socialLinks    SocialLink[]
}

// Article model representing individual pieces of content
model Article {
  id          String     @id @default(uuid())
  title       String
  description String
  content     String
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
}

// Project model representing projects a user has worked on
model Project {
  id          String     @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  status      Boolean @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String
}

// Category model representing different categories for articles
model Category {
  id        String     @id @default(uuid())
  name      String
  articles  Article[]
  updatedAt DateTime   @updatedAt
}

// Profile model representing user profiles and metadata
model Profile {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @unique
  fullName    String?
  bio         String?
  avatarUrl   String?
  metadata    String?
  updatedAt   DateTime   @updatedAt
}

// StaticPage model representing static content pages
model StaticPage {
  id          String     @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// SocialLink model representing social links associated with users
model SocialLink {
  id          String     @id @default(uuid())
  platform    String     // e.g., Twitter, LinkedIn, GitHub, etc.
  url         String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  updatedAt   DateTime   @updatedAt
}
